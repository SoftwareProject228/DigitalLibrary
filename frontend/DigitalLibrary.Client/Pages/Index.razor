@page "/"
@using DigitalLibrary.Client.ViewModels
@using System.Collections.Specialized
@inject NavigationManager NavigationManager
@inject IndexViewModel ViewModel
@inject IJSRuntime JsRuntime

<section class="sect">
    <p>Welcome to the digital library, @UserAuthorizationViewModel.UserName. Here you can see your materials.</p>
    <p><span>Type 'help' + <kbd>Enter</kbd> -- for available commands.</span></p>
</section>

<section>
    
    @foreach (var component in ViewModel.Components)
    {
        if (component.Type == ItemType.CommandItem)
        {
            <CommandInput OnCommand="@OnCommand" UserName="@UserAuthorizationViewModel.UserName"/>
        }
        else if (component.Type == ItemType.CommandStomp)
        {
            <CommandStomp CommandText="@(((CommandStompViewModel)component).CommandText)" UserName="@UserAuthorizationViewModel.UserName"/>
        }
    }

</section>

@code
{
    protected override void OnInitialized()
    {
        if (String.IsNullOrWhiteSpace(UserAuthorizationViewModel.Token))
            NavigationManager.NavigateTo("/login");
        else
        {
            ViewModel.Components.CollectionChanged -= ComponentsOnChanged;
            ViewModel.Components.CollectionChanged += ComponentsOnChanged;
        }
    }

    private void ComponentsOnChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
        StateHasChanged();
    }

    private async void OnCommand(string command, IDictionary<string, string> parameters)
    {
        var commandText = command;
        foreach (var parameter in parameters)
        {
            commandText += ' ' + parameter.Key + ' ' + parameter.Value;
        }
        _components.RemoveAt(_components.Count - 1);
        _components.Add(new CommandStompViewModel {CommandText = commandText});
        _components.Add(new CommandInputViewModel());
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("focusElement", "command");
        await JsRuntime.InvokeVoidAsync("focusElement", "command");
    }
}
